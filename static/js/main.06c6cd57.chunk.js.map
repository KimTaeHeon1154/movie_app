{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","App.js","index.js"],"names":["About","Movie","year","title","summary","poster","genres","className","src","alt","slice","map","argu","index","key","Home","state","isLoading","movies","axios","get","data","this","setState","arg","id","medium_cover_image","React","Component","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"gPAMeA,MAJf,WACI,OAAO,6C,wFC2BIC,MA1Bf,YAAuD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC1C,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKL,EAASD,MAAOA,IACvC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,uBAAGK,UAAU,kBAAkBH,EAAQM,MAAM,EAAE,KAA/C,OACA,wBAAIH,UAAU,iBACTD,EAAOK,KAAI,SAACC,EAAMC,GAAP,OAAkB,wBAAIC,IAAKD,EAAON,UAAU,iBAAiBK,UCoC9EG,G,iNApCXC,MAAQ,CAEJC,WAAW,EACXC,OAAQ,I,qNAKgCC,IAAMC,IAAI,4D,gBAA5BF,E,EAAfG,KAAOA,KAAQH,OAEtBI,KAAKC,SAAS,CAAEL,SAAQD,WAAW,I,qIAK9B,IAAD,EACwBK,KAAKN,MAA1BC,EADH,EACGA,UAAWC,EADd,EACcA,OAClB,OAEI,6BAASX,UAAU,aACdU,EACG,yBAAKV,UAAU,UACX,0BAAMA,UAAU,gBAAhB,eAGJ,yBAAKA,UAAU,UACVW,EAAOP,KAAI,SAAAa,GACR,OAAO,kBAAC,EAAD,CAAOV,IAAKU,EAAIC,GAAIA,GAAID,EAAIC,GAAIvB,KAAMsB,EAAItB,KAAMC,MAAOqB,EAAIrB,MAAOC,QAASoB,EAAIpB,QAASC,OAAQmB,EAAIE,mBAAoBpB,OAAQkB,EAAIlB,mB,GA5BpJqB,IAAMC,YCGVC,MAVf,WAEI,OAAO,kBAAC,IAAD,KAEH,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWjB,IAExC,kBAAC,IAAD,CAAOe,KAAK,SAASE,UAAWhC,MCJxCiC,IAASC,OAAQ,kBAAE,EAAF,MAAWC,SAASC,eAAe,W","file":"static/js/main.06c6cd57.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction About() {\n    return <span>about page</span>\n}\n\nexport default About;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({year, title, summary, poster, genres}){\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={summary} title={title}/>\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <p className=\"movie__sumamry\">{summary.slice(0,140)}...</p>\n                <ul className=\"movie__genres\">\n                    {genres.map((argu, index) => (<li key={index} className=\"genres__genre\">{argu}</li>))}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\n// json파일에서 데이터 형식 보고 맞춰주면 된다\nMovie.propTypes={\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\n// 외부의 데이터를 가져오기 위한 툴, axios\nimport Movie from \"../components/Movie\";\nimport PropTypes from 'prop-types';\nimport \"./Home.css\";\n// css적용을 위해 css파일 import\n\n// state (동적으로 변하는 데이터를 처리하기 위함!)\n\n\n// React.Component라는 모 클래스로부터 파생된 App 클래스. (React.Component클래스의 인스턴스 모두 사용 가능!)\nclass Home extends React.Component{\n    state = {\n        // state안의 내용물을 밖에서 가져오려면, this.state.isLoading 이렇게 해야함~\n        isLoading: true,\n        movies: []\n    };\n\n    async componentDidMount(){\n        // 렌더링을 하고 바로 직후에, axios를 사용해 아래 url에 있는 데이터를 가져온다. (데이터를 온전히 가져올때까지 기다려야 하므로 async, await 쓴다.)\n        const {data: {data : {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n        // console.log()해보면, 위 json 파일에서 data.data.movies에 실제 영화 데이터들이 들어잇기 때문에 변수를 저렇게 지정해준다.\n        this.setState({ movies, isLoading: false});\n        // state의 movies array에, json파일의 movies를 넣어준다 + movies 다 옮겨지면 isLoading을 false로 바꾼다.\n    }\n\n    // render 메서드 안에서 return으로 웹페이지에 구현한다. / state는 아래와 같은 방식으로 렌더링할 수 있다.\n    render(){\n        const {isLoading, movies} = this.state;\n        return (\n            // 아래 구문은, if (isLoading) {\"Loading\"} else {movies.map(~~~)}와 같음\n            <section className=\"container\">\n                {isLoading ? (\n                    <div className=\"loader\">\n                        <span className=\"loader__text\">Loading...</span>\n                    </div>\n                ) : (\n                    <div className=\"movies\">\n                        {movies.map(arg => {\n                            return <Movie key={arg.id} id={arg.id} year={arg.year} title={arg.title} summary={arg.summary} poster={arg.medium_cover_image} genres={arg.genres}/>\n                        })}\n                    </div>\n                )}\n            </section>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\n\nfunction App() {\n    // 라우터 기능 쓰기 위해서, npm i react-router-dom 한 다음, HashRouter, Route를 쓴다!!\n    return <HashRouter>\n        {/* path에는 url이 들어가고, component에는 js파일이 들어간다 */}\n        <Route path=\"/\" exact={true} component={Home}/>\n        {/* exact={true}를 해줘야, 딱 해당하는 url에서만 렌더링해줌. 안해주면 '/about'에 '/'있으니까 둘다 렌더링 해버림! */}\n        <Route path=\"/about\" component={About}/>\n    </HashRouter>\n}\n\nexport default App;","// 실제 웹페이지에 렌더링하는 파일\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// react는 한번에 하나의 컴포넌트만 렌더링할 수 있다.\nReactDOM.render( < App /> , document.getElementById('root'));\n"],"sourceRoot":""}